function ValidateForm(e) { e.preventDefault(); const r = document.querySelector("form.contact__form"), t = r.querySelectorAll(".contact__input"); let o = []; var a; t.forEach((e, r) => { o.push({ name: e.name, id: e.id, type: e.type, value: e.value, index: r, valid: !1, error: "", pattern: () => "email" === e.type ? /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i : /^[a-zA-Z'-,. ]{2,45}$/ }) }), o.forEach(e => { var r = isEmpty(e.value); if (!r[0]) return e.valid = r[0], e.error = r[1], !1; e.valid = r[0], e.error = r[1], patternMatchTest(e) ? (e.valid = !0, e.error = "") : (e.valid = !1, e.error = "Invalid characters") }), removeErrors(r), o.every(e => !!e.valid) ? (console.log("Send to backend"), a = JSON.stringify({ name: o[0].value, email: o[1].value, subject: o[2].value, message: o[3].value }), fetch("assets/mail/contact.inc.php", { method: "POST", headers: { "Content-Type": "application/json" }, body: a }).then(e => e.json()).then(e => { console.log("Result"), console.log(e), 2 === e.length ? showAlert(e) : 4 === e.length && showErrors(e) }).catch(e => { console.log(e) })) : showErrors(o), e.preventDefault() } function removeErrors(e) { e.querySelectorAll(".contact__error-border").forEach(e => { e.classList.remove("contact__error-border"), e.querySelector(".show-error").remove("show-error") }), e.querySelector(".alert").classList.remove("show-alert", "success", "error") } function showErrors(e) { e.forEach(t => { if (!t.valid) { let e = document.querySelectorAll(".contact__input")[t.index].parentElement; e.classList.add("contact__error-border"); let r = e.querySelector(".contact__error"); r.classList.add("show-error"), r.querySelector(".error-msg").textContent = t.error } }), console.log("Invalid Form") } function showAlert(e) { let r = document.querySelector(".alert"); 502 === e[0] ? (r.classList.add("error", "show-alert"), r.querySelector("span").textContent = e[1]) : 200 === e[0] && (r.classList.add("success", "show-alert"), r.querySelector("span").textContent = e[1]) } function isEmpty(e) { return 0 !== e.length && "" !== e ? 2 <= e.length && e.length <= 75 ? [!0, ""] : [!1, "2-75 characters max."] : [!1, "Field is empty"] } const patternMatchTest = e => e.pattern().test(e.value);